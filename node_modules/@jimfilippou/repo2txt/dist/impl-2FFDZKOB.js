function p(l){if(typeof l!="string")return!1;let a=l.trim();return a===""?!1:/^[^,]+(,[^,]+)*$/.test(a)}import k from"node:buffer";async function F(l,a){let{fs:i,path:s}=this,f="repo2txt.txt",y=["node_modules","dist",".git",".next",".vscode",".idea",".env","Thumbs.db","yarn.lock","npm-debug.log","pnpm-lock.yaml","package-lock.json",f];function b(n){return n&&p(n)?n.split(","):(n&&console.warn("Invalid --exclude flag."),[])}let x=new Set([...y,...b(l.exclude)]);function d(n){return n instanceof Error?n.message:String(n)}function h(n){return x.has(s.basename(n))||s.basename(n)===f}function g(n){return!k.isUtf8(i.readFileSync(n))}function m(n,e=[]){try{i.readdirSync(n).forEach(function(c){let t=s.join(n,c);if(!h(t))try{i.statSync(t).isDirectory()?m(t,e):e.push(t)}catch(r){console.warn(`Error processing ${t}: ${d(r)}`)}})}catch(c){console.warn(`Unable to read directory ${n}: ${d(c)}`)}return e}function C(n,e){return g(n)?"[Binary file content not included]":e.replace(/\s+/g," ").trim()}function E(n){let e=s.join(n,f),c=m(n),t=`Project Structure:
`,r={};c.forEach(o=>{let u=s.relative(n,o);if(g(o))r[u]="[Binary file content not included]";else{let S=i.readFileSync(o,"utf8");r[u]=C(o,S)}}),Object.keys(r).sort().forEach(o=>{t+=`- ${o}
`}),t+=`
File Contents:
`,Object.entries(r).forEach(([o,u])=>{t+=`
--- ${o} ---
`,t+=u+`
`}),i.writeFileSync(e,t),console.log(`Repository contents have been written to ${e}`)}try{E(a)}catch(n){console.error("An error occurred:",d(n))}}export{F as default};
